#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

async def test_web_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞"""
    try:
        print("üöÄ Testing Patent Search Web Service...")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from src.infrastructure.config.settings import Settings
        from src.infrastructure.rospatent.repository import RospatentRepository
        from src.infrastructure.rospatent.config import RospatentConfig
        from src.infrastructure.cache.patent_cache import PatentCache
        from src.infrastructure.gigachat.client import GigaChatClient
        from src.infrastructure.gigachat.config import GigaChatConfig
        from src.application.services.patent_summarizer import PatentSummarizer
        from src.application.services.patent_clustering import PatentClusteringService
        from src.application.services.patent_analytics import PatentAnalyticsService
        from src.application.use_cases.patent_search import PatentSearchUseCase
        from src.interfaces.web.app import PatentSearchAPI

        print("‚úÖ Imports successful")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            settings = Settings.from_env()
            print("‚úÖ Settings loaded successfully")
            print(f"   Web service will run on {settings.web_host}:{settings.web_port}")
        except Exception as e:
            print(f"‚ùå Settings error: {e}")
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        try:
            patent_cache = PatentCache()
            gigachat_config = GigaChatConfig(
                client_id=settings.gigachat_client_id,
                client_secret=settings.gigachat_client_secret,
                base_url=settings.gigachat_base_url
            )
            gigachat_client = GigaChatClient(gigachat_config)
            rospatent_config = RospatentConfig(
                jwt_token=settings.rospatent_jwt,
                base_url=settings.rospatent_base_url
            )
            patent_repository = RospatentRepository(rospatent_config)
            patent_summarizer = PatentSummarizer(gigachat_client)
            clustering_service = PatentClusteringService(gigachat_client)
            analytics_service = PatentAnalyticsService(gigachat_client)
            search_use_case = PatentSearchUseCase(patent_repository)

            print("‚úÖ All services initialized successfully")
        except Exception as e:
            print(f"‚ùå Service initialization error: {e}")
            return False

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        try:
            api = PatentSearchAPI(
                search_use_case=search_use_case,
                patent_summarizer=patent_summarizer,
                clustering_service=clustering_service,
                analytics_service=analytics_service
            )
            print("‚úÖ API instance created successfully")

            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from src.interfaces.web.app import api_instance
            # Note: In real app, this would be set by the startup event
            print("‚úÖ API instance would be set globally by startup event")

        except Exception as e:
            print(f"‚ùå API creation error: {e}")
            return False

        print("\nüéâ All tests passed! Web service is ready to run.")
        print("\nTo start the web service, run:")
        print("python -m src.interfaces.web.main")
        print("\nOr use uvicorn directly:")
        print("uvicorn src.interfaces.web.app:app --host 0.0.0.0 --port 8000 --reload")

        return True

    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("Patent Search Web Service Test")
    print("=" * 40)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  Warning: .env file not found. Using default settings.")
        print("   Make sure to create .env file based on .env.example")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = asyncio.run(test_web_service())

    if success:
        print("\n‚úÖ Web service test completed successfully!")
        sys.exit(0)
    else:
        print("\n‚ùå Web service test failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
